<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%"
		 creationComplete="onCreationComplete(event)">
	

	<fx:Script>
		<![CDATA[
			import mx.charts.Legend;
			import mx.charts.PieChart;
			import mx.charts.series.PieSeries;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			
			import org.openscales.core.feature.Feature;
			
			import solutions.utils.ChartUtils;
			
			import spark.events.IndexChangeEvent;
			
			import widgets.componentes.graficos.ListItemValueObject;
			import widgets.componentes.graficos.RadioButtonItemObject;
			
			
			[Bindable]
			private var _data:Object;
			
			[Bindable]
			private var _mode:String;
			
			[Bindable]
			private var _dateFieldVisible:Boolean = false;
			
			[Bindable]
			private var _listaCamposNomes:Array;
			
			[Bindable]
			private var _listaCamposNumericos:Array;
			
			[Bindable]
			private var _listaCamposDatas:Array;
			
			[Bindable]
			private var pie:PieChart;

			private var _dadosSelecionados:ArrayCollection;
			
			private var pieSeries:PieSeries;
			
			private var selecionouCampos:Boolean = false;
			

			public function get data():Object
			{
				return this._data;
			}
			
			public function set data(value:Object):void
			{
				var listaNomes:Array;
				var listaNumericos:Array;
				var listaDatas:Array;
				
				if (value) 
				{				
					this._mode = value.modo;
					
					this._data = value.dados;
					
					listaNomes = new Array();
					
					listaNumericos = new Array();
					
					listaDatas = new Array();
					listaDatas.push("-");
					
					var dadosRecebidos:Vector.<Feature> = this.data as Vector.<Feature>;
					var numeroRegs:int = dadosRecebidos.length;
					
					if (numeroRegs > 0)
					{
						var attr:Object;
						var feat:Feature = dadosRecebidos[0];
						attr = (feat.attributes);
						
						for (var name:String in attr) 
						{ 						
							if(!isNaN(attr[name])){
								listaNumericos.push(name);
							}
							
							if ((attr[name] is String) && (isNaN(attr[name]))) 
							{
								listaNomes.push(name);
							}
							
							if ((name.search("data") > -1) || (name.search("date") > -1))
							{
								listaDatas.push(name);
								_dateFieldVisible = true;
							}
						}
						
						preparaCamposNomes(listaNomes);
						preparaCamposNumericos(listaNumericos);
						preparaCamposDatas(listaDatas);
					}
				}
			}
			
			private function addChart():void
			{
				pie = new PieChart();
				pie.percentHeight = 100;
				pie.percentWidth = 100;
				pie.showDataTips = true;
				
				pieSeries = new PieSeries();
				pieSeries.field="dado";
				pieSeries.nameField="categoryField";
				pieSeries.displayName = "categoryField";
				
				pie.series = [pieSeries];
				
				pieSeries.setStyle("showDataEffect", seriesSlideShow);
				//pieSeries.setStyle("showDataEffect", seriesInterpolateShow);
				
				chartContainer.addElement(pie);			
				
				legenda.dataProvider = pie;
				
			}
			
			private function preparaCamposNomes(lista:Array):void
			{
				var tamanho:int = lista.length;
				var itemCamposNomes:Object;
				
				lista.sort();
				
				//_listaCamposNomes = lista;
				
				if (_listaCamposNomes == null)
				{
					_listaCamposNomes = new Array();
				}
				
				for (var i:int=0; i<tamanho; i++)
				{
					itemCamposNomes = new RadioButtonItemObject();
					itemCamposNomes.label = lista[i];
					itemCamposNomes.group = radioGroupNome;
					
					_listaCamposNomes.push(itemCamposNomes);
				} 
			}
			
			private function preparaCamposNumericos(lista:Array):void
			{
				var tamanho:int = lista.length;
				var itemCamposNumericos:Object;
				
				lista.sort();
				
				if (_listaCamposNumericos == null)
				{
					_listaCamposNumericos = new Array();
				}
				else
				{
					_listaCamposNumericos.slice(0);
					_listaCamposNumericos = null;
				}
				
				for (var i:int=0; i<tamanho; i++)
				{
					itemCamposNumericos = new RadioButtonItemObject();
					itemCamposNumericos.label = lista[i];
					itemCamposNumericos.group = radioGroupNumerico;
					
					_listaCamposNumericos.push(itemCamposNumericos);
				}
			}
			
			private function preparaCamposDatas(lista:Array):void
			{
				_listaCamposDatas = lista;
			}
			
			
			private function selecionaDados(nome:String, numerico:String, data:String=null):void
			{
				if (this._data) 
				{
					
					if (!_dadosSelecionados)
					{
						_dadosSelecionados = new ArrayCollection();
					}
					_dadosSelecionados.removeAll();
					
					var dadosRecebidos:Vector.<Feature> = this._data as Vector.<Feature>;
					var numeroRegs:int = dadosRecebidos.length;
					
					if (numeroRegs > 0)
					{
						var auxObject:Object;
						var attr:Object;
						
						for (var i:int=0; i<numeroRegs; i++)
						{
							var feat:Feature = dadosRecebidos[i];
							
							attr = (feat.attributes);
							
							auxObject = new Object();
							
							var tamanhoArrColl:int = _dadosSelecionados.length;
							var repeteCategory:Boolean = false;
							var ind:int = 0;
							
							while ((!repeteCategory) && (ind < tamanhoArrColl))
							{								
								var objeto:Object;
								
								objeto = _dadosSelecionados[ind];
								if (objeto.categoryField == attr[nome]) 
								{
									repeteCategory = true;
								}
								ind++;
							}
							
							if (!repeteCategory)
							{
								if (attr[nome])
								{
									auxObject["categoryField"] = attr[nome];
									
									if (attr[numerico])
									{
										auxObject["dado"] = attr[numerico];
									}
									else
									{
										auxObject["dado"] = 0.0;
									}
									
									/*if (_dateFieldVisible)
									{
										if ((data != null) && (data != "-") && (attr[data]))
										{
											 if (dataNoIntervalo(attr[data]))
											{
												_dadosSelecionados.addItem(auxObject);
											} 
										}
										else if ((data == null) || (data == "-"))
										{
											_dadosSelecionados.addItem(auxObject);
										}
									}
									else
									{*/
									_dadosSelecionados.addItem(auxObject);
									//}
									
								}
							}
							else
							{
								ind--;
								
								auxObject = new Object();
								auxObject = _dadosSelecionados.getItemAt(ind);
								auxObject.dado = Number(auxObject.dado) + Number(attr[numerico]);
								
								/* if (_dateFieldVisible)
								{
									if ((data != null) && (data != "-") && (attr[data]))
									{
										if (dataNoIntervalo(attr[data]))
										{
											_dadosSelecionados[ind] = auxObject;
											
										}
									}
									else if ((data == null) || (data == "-"))
									{
										_dadosSelecionados[ind] = auxObject;
									}
								}
								else
								{ */
								_dadosSelecionados[ind] = auxObject;
								//}								
								
							}	
						}
						selecionouCampos = true;
					}
				}
			}
			
			private function verificaCampos():void
			{
				var nomeOK:Boolean = false;
				var numericoOK:Boolean = false;
				
				var nomeSelecionado:String;
				var numericoSelecionado:String;
				var dataSelecionada:String;
				
				dataSelecionada = "-";
				
				/* if ((alterouNome) && (!alterouNumericos))
				{
				//Muda só o campo do series
				}
				else
				{ */
				if (radioGroupNome.selectedValue != null)
				{						
					/* idx = int(radioGroupNome.selectedValue);
					nomeObj = camposNomes.getItemAt(idx);
					nomeSelecionado = nomeObj.label; */
					nomeSelecionado = radioGroupNome.selectedValue as String;
					
					nomeOK = true;
				}
				
				if (radioGroupNumerico.selectedValue != null)
				{						
					/* idx = int(radioGroupNome.selectedValue);
					nomeObj = camposNomes.getItemAt(idx);
					nomeSelecionado = nomeObj.label; */
					numericoSelecionado = radioGroupNumerico.selectedValue as String;
					
					numericoOK = true;
				}				
				
				if (_dateFieldVisible)
				{
					//dataSelecionada = comboBoxData.selectedLabel;
				}
				if (nomeOK && numericoOK)
				{
					selecionaDados(nomeSelecionado, numericoSelecionado, dataSelecionada);
				}
			}

			protected function onCreationComplete(event:FlexEvent):void
			{
				addChart();
			}
			
			protected function geraGrafico(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				verificaCampos();
				
				var auxLabel:String;
				
				var numCateg:int;
				
				if (selecionouCampos)
				{
					if (_dadosSelecionados)
					{
						
						numCateg =  _dadosSelecionados.length;
						
						if (numCateg == 1)
						{
							auxLabel = "1 categoria, 1 série de dados";
						}
						else
						{
							auxLabel =  numCateg.toString() + " categorias, 1 série de dados";						
						}
		
						((this.owner as IVisualElement).owner as Object).lblRegs.text = auxLabel;
						
						
						ChartUtils.SetPieChartSeriesFills(pie.series, _dadosSelecionados.length);
						
						pie.dataProvider = _dadosSelecionados;
						
					}
					
					selecionouCampos = false;
				}
			}


			protected function popUpAnchorcreationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				(event.currentTarget as BorderContainer).styleName = "estiloPopUpChart";
			}
			
			private function rollOverConfigContainer(event:MouseEvent):void
			{
				popupNomes.displayPopUp = false;
				popupNumericos.displayPopUp = false;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<s:RadioButtonGroup id="radioGroupNome"/>
		<s:RadioButtonGroup id="radioGroupNumerico"/>
		
		
		<mx:ArrayCollection id="camposNomes" source="{_listaCamposNomes}"/>
		<mx:ArrayCollection id="camposNumericos" source="{_listaCamposNumericos}"/>
		
		
		<mx:SeriesInterpolate id="seriesInterpolateShow" duration="1000"/>
		<mx:SeriesSlide id="seriesSlideShow" duration="1000" direction="up" />
	</fx:Declarations>
	
	
	<s:Group width="100%" height="100%" rollOver="rollOverConfigContainer(event)">
		<s:layout>
			<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle" gap="10"/>
		</s:layout>
	
		<s:BorderContainer id="configContainer" width="18%" height="100%" 
						   styleName="estiloChartConfigContainer">
			<s:layout>
				<s:VerticalLayout verticalAlign="top" horizontalAlign="center" gap="15"
								  paddingBottom="15" paddingLeft="7" paddingRight="7" paddingTop="15"/>
			</s:layout>
			
			<s:Label text="Selecione os campos:" styleName="estiloLabel" width="100%"/>
			
			<s:Group width="100%" height="80%">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" verticalAlign="top" gap="20"/>
				</s:layout>
	
				<s:BorderContainer width="100%" styleName="estiloInvisibleContainer">
					<s:layout>
						<s:VerticalLayout horizontalAlign="left" verticalAlign="top" gap="0"/>
					</s:layout>
					
					<s:Button width="100%" label="Nome" styleName="estiloWidgetContentMainButton"
							  skinClass="assets.skins.ButtonAsDropDownListButtonSkin"
							  click="{popupNomes.displayPopUp = !popupNomes.displayPopUp}"/>
					
					<s:PopUpAnchor id="popupNomes" left="0" bottom="0"
								   popUpPosition="below" popUpWidthMatchesAnchorWidth="false">
						<s:BorderContainer rollOut="{popupNomes.displayPopUp = false}" 
										   creationComplete="popUpAnchorcreationCompleteHandler(event)">
							<s:layout>
								<s:HorizontalLayout paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"/>
							</s:layout>
							
							<s:Scroller left="0" top="0" right="0" bottom="0" focusEnabled="false"
										minViewportInset="0" verticalScrollPolicy="auto">
								<s:DataGroup dataProvider="{camposNomes}" 
											 itemRenderer="widgets.componentes.graficos.renderer.RadioButtonItemRenderer">
									<s:layout>
										<s:TileLayout horizontalGap="5" verticalGap="5" 
													  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"
													  requestedColumnCount="3" requestedRowCount="5" columnWidth="200" /> 
									</s:layout>
								</s:DataGroup>
							</s:Scroller>
						</s:BorderContainer>
					</s:PopUpAnchor>
					
				</s:BorderContainer>
				
				
				<s:BorderContainer width="100%" styleName="invisibleContainer">
					<s:layout>
						<s:VerticalLayout horizontalAlign="left" verticalAlign="top" gap="0"/>
					</s:layout>
					
					<s:Button width="100%" label="Valores" styleName="estiloWidgetContentMainButton"
							  skinClass="assets.skins.ButtonAsDropDownListButtonSkin"
							  click="{popupNumericos.displayPopUp = !popupNumericos.displayPopUp}"/>
					
					<s:PopUpAnchor id="popupNumericos" left="0" bottom="0"
								   popUpPosition="below" popUpWidthMatchesAnchorWidth="false">
						<s:BorderContainer rollOut="{popupNumericos.displayPopUp = false}" 
										   creationComplete="popUpAnchorcreationCompleteHandler(event)">
							<s:layout>
								<s:HorizontalLayout paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"/>
							</s:layout>
							
							<s:Scroller left="0" top="0" right="0" bottom="0" focusEnabled="false"
										minViewportInset="1" verticalScrollPolicy="auto">
								<s:DataGroup dataProvider="{camposNumericos}" 
											 itemRenderer="widgets.componentes.graficos.renderer.RadioButtonItemRenderer">
									<s:layout>
										<s:TileLayout horizontalGap="5" verticalGap="5" 
													  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"
													  requestedColumnCount="3" requestedRowCount="5" columnWidth="200" /> 
									</s:layout>
								</s:DataGroup>
							</s:Scroller>
						</s:BorderContainer>
					</s:PopUpAnchor>
					
				</s:BorderContainer>
				
			</s:Group>
			
			<s:Group width="100%" height="20%">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" verticalAlign="bottom" gap="35"/>
				</s:layout>
				
				<s:Button width="100%" label="Gerar Gráfico" styleName="estiloWidgetContentMainButton" click="geraGrafico(event)"/>
				
			</s:Group>
			
		</s:BorderContainer>
		
		
		<s:BorderContainer id="chartBox" width="82%" height="100%" styleName="estiloChartContainer">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle" horizontalAlign="center" gap="0"
									paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
			</s:layout>
			
			<s:Group width="100%" height="85%" id="chartContainer"/>
			
			<mx:Legend id="legenda" height="100%"/>
		</s:BorderContainer>
	
	</s:Group>
	
</s:Group>
