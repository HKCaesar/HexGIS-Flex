<?xml version="1.0" encoding="utf-8"?>
<solutions:BaseWidget  xmlns="*"
					   xmlns:solutions="solutions.*"
					   xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:os="http://openscales.org" 
					   creationComplete="configure()">
	
	<fx:Style source="assets/styles/estilo1.css"/>

	
	<fx:Script>
		<![CDATA[
			import assets.skins.NewVerticalScrollBarSkin;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.openscales.core.basetypes.Resolution;
			import org.openscales.core.control.MousePosition;
			import org.openscales.core.events.LayerEvent;
			import org.openscales.core.events.MapEvent;
			import org.openscales.core.feature.CustomMarker;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.feature.LabelFeature;
			import org.openscales.core.feature.PointFeature;
			import org.openscales.core.layer.DrawingsLayer;
			import org.openscales.core.layer.Layer;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.style.Rule;
			import org.openscales.core.style.Style;
			import org.openscales.core.style.fill.SolidFill;
			import org.openscales.core.style.marker.WellKnownMarker;
			import org.openscales.core.style.stroke.Stroke;
			import org.openscales.core.style.symbolizer.PointSymbolizer;
			import org.openscales.core.utils.Util;
			import org.openscales.geometry.LabelPoint;
			import org.openscales.geometry.Point;
			import org.openscales.geometry.basetypes.Bounds;
			import org.openscales.geometry.basetypes.Location;
			import org.openscales.geometry.basetypes.Pixel;
			import org.openscales.geometry.basetypes.Size;
			import org.openscales.proj4as.Proj4as;
			import org.openscales.proj4as.ProjPoint;
			import org.openscales.proj4as.ProjProjection;
			
			import spark.events.TextOperationEvent;
			
			import widgets.componentes.alerta.Alerta;
			import widgets.componentes.pontosLonLat.PontoLonLatObject;
			import widgets.componentes.pontosLonLat.renderer.PontosLonLatRenderer;
			
			
			[Bindable]
			private var listaNS:ArrayCollection = new ArrayCollection(["N", "S"]);
			
			[Bindable]
			private var listaEW:ArrayCollection = new ArrayCollection(["E", "W"]);
			
			[Bindable]
			private var pontosAdicionados:ArrayCollection;
			
			private var _itemRenderer:Class = PontosLonLatRenderer;
			
			[Bindable]
			private var _lblLstPontosLength:String;
			
			
			[Bindable]
			private var _camadaDesenho:VectorLayer;
			
			
			override protected function configure():void
			{	
				super.configure();
				
				if (!_camadaDesenho)
				{
					_camadaDesenho = new VectorLayer("camada_pontos");
					_camadaDesenho.displayInLayerManager = false;
					_camadaDesenho.editable = false;
					
					this.map.addLayer(_camadaDesenho);
				}
			}
			
			
			private function adicionaPonto(event:MouseEvent):void
			{
				var longitude:String;
				var latitude:String;
				
				var long:Number;
				var lati:Number;
				var localPonto:Location;
				var localPixel:Pixel;
				
				var lgGraus:Number;
				var lgMinutos:Number;
				var lgSegundos:Number;
				
				var ltGraus:Number;
				var ltMinutos:Number;
				var ltSegundos:Number;
				
				var lgGrausOK:Boolean;
				var lgMinutosOK:Boolean;
				var lgSegundosOK:Boolean;
				
				var ltGrausOK:Boolean;
				var ltMinutosOK:Boolean;
				var ltSegundosOK:Boolean;
				
				var lgOK:Boolean;
				var ltOK:Boolean;
				
				var auxFeat:PontoLonLatObject;
				
				var res:Resolution = map.resolution;
				
				var alerta:Alerta = new Alerta();
				
				
				if (longGraus.text.length == 0)
				{
					longGraus.text = "0.0";
				}
				
				if (longMinutos.text.length == 0)
				{
					longMinutos.text = "0.0";
				}
				
				if (longSegundos.text.length == 0)
				{
					longSegundos.text = "0.0";
				}
				
				if (latGraus.text.length == 0)
				{
					latGraus.text = "0.0";
				}
				
				if (latMinutos.text.length == 0)
				{
					latMinutos.text = "0.0";
				}
				
				if (latSegundos.text.length == 0)
				{
					latSegundos.text = "0.0";
				}
				
				lgGraus = Number(longGraus.text);
				lgMinutos = Number(longMinutos.text);
				lgSegundos = Number(longSegundos.text);
				
				ltGraus = Number(latGraus.text);
				ltMinutos = Number(latMinutos.text);
				ltSegundos = Number(latSegundos.text);
				
				if ((!isNaN(lgGraus)) && (!isNaN(lgMinutos)) && (!isNaN(lgSegundos)) &&
					(!isNaN(ltGraus)) && (!isNaN(ltMinutos)) && (!isNaN(ltSegundos)))
				{
					lgGrausOK = ((lgGraus < 180) && (lgGraus > -1));
					lgMinutosOK = ((lgMinutos < 60) && (lgMinutos > -1));
					lgSegundosOK = ((lgSegundos < 60) && (lgSegundos > -1));
					
					ltGrausOK = ((ltGraus < 90) && (ltGraus > -1));
					ltMinutosOK = ((ltMinutos < 60) && (ltMinutos > -1));
					ltSegundosOK = ((ltSegundos < 60) && (ltSegundos > -1));
					
					lgOK = (lgGrausOK && lgMinutosOK && lgSegundosOK);
					ltOK = (ltGrausOK && ltMinutosOK && ltSegundosOK);
					
					if ((lgOK || ((lgGraus == 180) && (lgMinutos == 0.0) && (lgSegundos == 0.0))) &&
						(ltOK || ((ltGraus == 90) && (ltMinutos == 0.0) && (ltSegundos == 0.0))))
					{					
						longitude = longGraus.text + "° " + longMinutos.text + "' " + longSegundos.text + '" ' + String(EorW.selectedItem);
						latitude = latGraus.text + "° " + latMinutos.text + "' " + latSegundos.text + '" ' + String(NorS.selectedItem);
						
						long = Number(Util.dmsToDeg(longitude));
						lati = Number(Util.dmsToDeg(latitude));
						
						localPonto = new Location(long, lati, new ProjProjection("EPSG:4326"));
						localPonto = localPonto.reprojectTo(map.projection);
						
						_camadaDesenho.scaleX = 1;
						_camadaDesenho.scaleY = 1;
						
						/*Cria e adiciona ponto*/
						var featPoint:Feature;
						var point:org.openscales.geometry.Point = new org.openscales.geometry.Point(localPonto.lon, localPonto.lat);
						featPoint = new PointFeature(point, null, getNewPointStyle());
						
						if (nomePonto.text.length > 0)
						{
							featPoint.name = nomePonto.text + ".renomeado." + _camadaDesenho.idPoint.toString();
						}
						else
						{
							featPoint.name = "point." + _camadaDesenho.idPoint.toString();
						}
						
						_camadaDesenho.idPoint++;
						_camadaDesenho.addFeature(featPoint);
						featPoint.draw();
						/*------------------------*/
						
						auxFeat = new PontoLonLatObject();
						auxFeat.coord = longitude + ", " + latitude;
						auxFeat.point = featPoint;
						
						if (!pontosAdicionados)
						{
							criaPtsAdicionados();
						}
						
						pontosAdicionados.addItemAt(auxFeat, 0);
					}
					else
					{
						alerta.exibirErro("Coordenadas inválidas.");
					}
				}
				else
				{
					alerta.exibirErro("Preencha os campos somente com números. Use ponto para separar o inteiro das casas decimais.");
				}
			}
			
			
			private function onListaPontosCreationComplete():void
			{
				if (!_camadaDesenho)
				{
					_camadaDesenho = new VectorLayer("camada_pontos");
					_camadaDesenho.displayInLayerManager = false;
					_camadaDesenho.editable = false;
					
					this.map.addLayer(_camadaDesenho);
				}

				longGraus.setFocus();
				
				var factory:ClassFactory = new ClassFactory(this._itemRenderer) 
				
				var instance:Object = new this._itemRenderer();
				
				if (instance is PontosLonLatRenderer)
				{
					factory.properties = {
						map: this.map,
						layer: this._camadaDesenho,
						widget: this
					} 
				}

				lstPontos.itemRenderer = factory;
				
				lstPontos.scroller.verticalScrollBar.setStyle("skinClass", NewVerticalScrollBarSkin);
				lstPontos.scroller.verticalScrollBar.setStyle("chromeColor", container.getStyle("backgroundColor"));
			}
			
			
			private function esvaziaLista(event:MouseEvent):void
			{
				var auxObj:PontoLonLatObject;
				var i:int;
				
				if (_camadaDesenho)
				{
					excluiLabelsPontos();
					
					for each (auxObj in pontosAdicionados)
					{
						_camadaDesenho.removeFeature(auxObj.point);
					}
				}
				
				pontosAdicionados.source = new Array();
			}

			
			public function removePointFromCamadaPontos(value:PontoLonLatObject):void
			{
				var index:int;
				
				if (value)
				{
					_camadaDesenho.removeFeature(value.point);
					index = pontosAdicionados.getItemIndex(value);
					
					if (index > -1)
					{
						pontosAdicionados.removeItemAt(index);
					}
				}
			}
			
			
			override protected function closeWidget(event:MouseEvent):void
			{
				excluiLabelsPontos();
				
				this._camadaDesenho.visible = false;
				
				super.closeWidget(event);
			}
			
			
			private function excluiLabelsPontos():void
			{
				var i:int;
				var feats:Vector.<Feature> = new Vector.<Feature>;
				
				if (_camadaDesenho)
				{
					for (i = 0; i < _camadaDesenho.features.length; i++)
					{
						if (_camadaDesenho.features[i] is LabelFeature)
						{
							feats.push(_camadaDesenho.features[i]);
						}
					}
					
					_camadaDesenho.removeFeatures(feats);
				}
			}
			
			
			private static function getNewPointStyle():Style
			{
				var style:Style = new Style();
				style.name = "New point style";
				style.rules.push(getNewPointRule());
				return style;
			}
			
			
			private static function getNewPointRule():Rule
			{
				var fill:SolidFill = new SolidFill(0xff0000, 0.75);
				var stroke:Stroke = new Stroke(0xfa0000, 1.5);
				
				var mark:WellKnownMarker = new WellKnownMarker(WellKnownMarker.WKN_CIRCLE, fill, stroke);
				
				var symbolizer:PointSymbolizer = new PointSymbolizer();
				symbolizer.graphic = mark;
				
				var rule:Rule = new Rule();
				rule.name = "New rule";
				rule.symbolizers.push(symbolizer);
				
				return rule;
			}
			
			
			private function ptsAdicionadosChanged(event:CollectionEvent):void
			{
				_lblLstPontosLength = pontosAdicionados.length.toString() + " ponto(s) adicionado(s)";
			}
			
			private function criaPtsAdicionados():void
			{
				pontosAdicionados = new ArrayCollection();
				pontosAdicionados.addEventListener(CollectionEvent.COLLECTION_CHANGE, ptsAdicionadosChanged);
			}
			
			private function pressionaEnter(event:KeyboardEvent):void
			{
				if (event.charCode == 13)
				{
					addPointBtn.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
				}
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>

		<s:Fade id="fadeIn" alphaFrom="0.0" alphaTo="1.0" duration="500" />
		
		<s:Fade id="fadeOut" alphaFrom="1.0" alphaTo="0.0" duration="500" />
		
	</fx:Declarations>
		
	
	<solutions:states>
		<s:State name="pontoState"/>
		<s:State name="maximized"/>
		<s:State name="minimized"/>
		<s:State name="opened"/>
		<s:State name="closed"/>
	</solutions:states>
	
	
	<s:BorderContainer id="container" styleName="widgetContentContainer" width="350"  height="400">
		<s:layout>
			<s:VerticalLayout verticalAlign="middle" horizontalAlign="center" gap="0"
							  paddingLeft="5" paddingTop="5" paddingBottom="10" paddingRight="5"/>
		</s:layout>
		
		<s:VGroup id="ponto" width="100%" height="100%" keyDown="pressionaEnter(event)"
				  paddingLeft="5" paddingRight="5" verticalAlign="top" horizontalAlign="center"
				  gap="0" includeIn="pontoState">
			
			<s:VGroup gap="7" height="55%" width="100%" verticalAlign="top" horizontalAlign="center">
				<s:List id="lstPontos"
						dataProvider="{pontosAdicionados}"
						width="100%" height="185" styleName="estiloInvisibleContainer"
						creationComplete="onListaPontosCreationComplete()">
					<s:layout>
						<s:VerticalLayout horizontalAlign="center" gap="0"/>
					</s:layout>
				</s:List>
				
				<s:Line width="100%" >
					<s:stroke>
						<s:SolidColorStroke color="{container.getStyle('backgroundColor')}" weight="1" caps="square"/>
					</s:stroke>
				</s:Line>
				
				<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="right">
					<s:HGroup width="50%" verticalAlign="middle" horizontalAlign="left">
						<s:Label text="{_lblLstPontosLength}"
								 styleName="estiloTextoAjuda" />
					</s:HGroup>
					
					<s:HGroup width="50%" verticalAlign="middle" horizontalAlign="right">
						<s:Button label="Limpar" click="esvaziaLista(event)" 
								  styleName="estiloWidgetContentButton" skinClass="assets.skins.TabButtonSkin"/>
					</s:HGroup>
					
				</s:HGroup>
			</s:VGroup>
			
			<s:VGroup gap="15" width="100%" height="45%" verticalAlign="middle" horizontalAlign="center">
				<s:HGroup gap="10" width="100%" verticalAlign="bottom" horizontalAlign="center">
					
					<s:VGroup gap="20" width="20%" verticalAlign="top" horizontalAlign="center">				
						<s:Label width="100%" styleName="estiloLabel" text="Long" textAlign="left"/>
						
						<s:Label width="100%" styleName="estiloLabel" text="Lat" textAlign="left"/>
						
						<s:Label text="Nome" width="100%" textAlign="left" styleName="estiloLabel"/>
					</s:VGroup>
					
					<s:VGroup gap="10" width="80%" verticalAlign="middle" horizontalAlign="left">
						
						<s:HGroup gap="10" width="100%">
							<s:HGroup width="25%" verticalAlign="bottom" horizontalAlign="center">
								<s:Label styleName="estiloLabel" text="G"/>
							</s:HGroup>
							
							<s:HGroup width="25%" verticalAlign="middle" horizontalAlign="center">
								<s:Label styleName="estiloLabel" text="M"/>
							</s:HGroup>
							
							<s:HGroup width="25%" verticalAlign="middle" horizontalAlign="center">
								<s:Label styleName="estiloLabel" text="S"/>
							</s:HGroup>
							
							<s:HGroup width="25%" verticalAlign="middle" horizontalAlign="center">
								<s:Label styleName="estiloLabel" text="Hemisférios"/>
							</s:HGroup>
						</s:HGroup>
						
						<s:HGroup gap="10" verticalAlign="middle" horizontalAlign="left">
							<s:HGroup gap="3">
								<s:TextInput id="longGraus" width="50" prompt="0.0" restrict="0-9."
											 styleName="estiloTextInput" textAlign="center"/>
								<s:Label text="°"/>
							</s:HGroup>
							
							<s:HGroup gap="3">
								<s:TextInput id="longMinutos" width="50" prompt="0.0" restrict="0-9."
											 styleName="estiloTextInput" textAlign="center"/>
								<s:Label text="'"/>
							</s:HGroup>
							
							<s:HGroup gap="3">
								<s:TextInput id="longSegundos" width="50" prompt="0.0" restrict="0-9."
											 styleName="estiloTextInput" textAlign="center"/>
								<s:Label text='"'/>
							</s:HGroup>
							
							<s:DropDownList id="EorW" prompt="Selecione" selectedIndex="1"
											dataProvider="{listaEW}" width="70" styleName="estiloDropDownList"/>
						</s:HGroup>
						
						<s:HGroup gap="10">
							<s:HGroup gap="3">
								<s:TextInput id="latGraus" width="50" prompt="0.0" restrict="0-9."
											 styleName="estiloTextInput" textAlign="center"/>
								<s:Label text="°"/>
							</s:HGroup>
							
							<s:HGroup gap="3">
								<s:TextInput id="latMinutos" width="50" prompt="0.0" restrict="0-9."
											 styleName="estiloTextInput" textAlign="center"/>
								<s:Label text="'"/>
							</s:HGroup>
							
							<s:HGroup gap="3">
								<s:TextInput id="latSegundos" width="50" prompt="0.0" restrict="0-9."
											 styleName="estiloTextInput" textAlign="center"/>
								<s:Label text='"'/>
							</s:HGroup>
							
							<s:DropDownList id="NorS" prompt="Selecione" selectedIndex="1"
											dataProvider="{listaNS}" width="70" styleName="estiloDropDownList"/>
						</s:HGroup>
						
						<s:TextInput id="nomePonto" width="100%" styleName="estiloTextInput"/>
					</s:VGroup>
					
				</s:HGroup>
			</s:VGroup>
			
			<s:HGroup width="100%" height="10%" paddingTop="5" gap="0"
					  verticalAlign="bottom" horizontalAlign="center">
				
				<s:HGroup width="50%" verticalAlign="bottom" horizontalAlign="left">
					
				</s:HGroup>
				<s:HGroup width="50%" verticalAlign="bottom" horizontalAlign="right">
					<s:Button id="addPointBtn" label="Adicionar" width="100"
							  click="adicionaPonto(event)"
							  styleName="estiloWidgetContentMainButton" />
				</s:HGroup>
			</s:HGroup>
		</s:VGroup>
		
	</s:BorderContainer>
	
</solutions:BaseWidget>
